{"version":3,"sources":["queries/getUser.js","utils/getToken.js","auth/getUser.js","components/Navbar/Navbar.js","utils/siteConfig.js","components/Footer/Footer.js","components/Error/Error.js","components/Loading/Loading.js","theme.js","components/Layout/Layout.js","mutations/createUser.js","components/Signup/Signup.js","queries/getProfile.js","utils/formUtils.js","mutations/loginUser.js","components/Login/Login.js","queries/allRecipes.js","components/Recipes/Recipes.js","queries/recipeSearch.js","components/Search/Search.js","updateCache/updateUserCreatedRecipes.js","updateCache/helpers.js","updateCache/addRecipeToCache.js","mutations/addRecipe.js","auth/getProfile.js","components/AddRecipe/AddRecipe.js","mutations/removeLike.js","updateCache/updateUserFavs.js","components/Favourite/Favourite.js","mutations/deleteRecipe.js","mutations/addLike.js","utils/handleLikeButtonClick.js","updateCache/updateAllRecipes.js","components/UserRecipe/UserRecipe.js","components/Profile/Profile.js","queries/getRecipe.js","components/Recipe/Recipe.js","auth/withAuth.js","routes.js","App.js","index.js"],"names":["GET_USER","gql","getToken","localStorage","getItem","token","getUser","client","readQuery","query","variables","err","useStyles","makeStyles","theme","root","textDecoration","textTransform","color","flexGrow","menuButton","marginRight","spacing","title","Navbar","classes","useApolloClient","user","handleLogout","removeItem","window","location","replace","history","useHistory","AuthNav","aria-label","MenuItem","onClick","push","username","toUpperCase","name","Nav","to","data-testid","className","AppBar","position","Toolbar","Button","Typography","component","variant","Footer","error","display","justifyContent","height","alignItems","Error","message","Card","role","loading","Loading","CircularProgress","createMuiTheme","palette","primary","pink","overrides","MuiButtonBase","MuiCssBaseline","html","WebkitFontSmoothing","container","marginTop","marginBottom","Layout","children","useQuery","data","ThemeProvider","CssBaseline","Container","maxWidth","CREATE_USER","flexDirection","width","paper","padding","paddingBottom","button","initialState","email","password","confirmPassword","Signup","useState","state","setState","useMutation","createUser","handleChange","target","value","Paper","align","heading","noValidate","autoComplete","TextField","label","onChange","event","type","preventDefault","then","res","assign","catch","console","log","handleSubmit","GET_PROFILE","handleInputChange","setError","LOGIN_USER","Login","loginUser","form","validateLoginForm","a","setItem","handleLoginSubmit","GET_ALL_RECIPES","card","margin","header","likes","Recipes","RecipeCard","recipe","CardContent","_id","List","ListItem","ListItemText","secondary","category","description","instructions","getAllRecipes","map","key","RECIPE_SEARCH","Search","searchTerm","setSearchTerm","searchData","setSearchData","useLazyQuery","onCompleted","recipeSearch","search","refetch","SearchRecipeCard","placeholder","onBlur","called","updateUserCreatedRecipes","store","recipes","profile","getProfile","writeQuery","createdRecipes","removeRecipe","recipeId","filter","addRecipe","checkRecipeLiked","favs","liked","forEach","fav","getFavourites","favourites","addRecipeToCache","existingRecipes","ADD_RECIPE","formControl","AddRecipe","multiline","rows","FormControl","InputLabel","id","Select","validateRecipeForm","update","updatedUserCreatedRecipes","addRecipeHelper","REMOVE_LIKE","updateFavs","favRecipes","updateProfileFavs","updateUserFavs","minWidth","Favourite","removeLike","newFavs","DELETE_RECIPE","ADD_LIKE","handleLikeClick","addLike","userLiked","__typename","updateAllRecipes","buttonDiv","UserRecipes","deleteRecipe","handleDeleteRecipe","rootRecipes","updatedRootRecipes","formatDate","date","newDate","Date","toLocaleDateString","newTime","toLocaleTimeString","Profile","noFavs","length","noCreatedRecipes","classusername","joinDate","UserRecipe","GET_RECIPE","Recipe","setLiked","useParams","useEffect","checkIfLiked","getRecipe","withAuth","Component","props","BaseRouter","path","exact","authLink","ApolloLink","operation","forward","setContext","headers","authorization","response","getContext","authToken","get","refreshToken","httpLink","HttpLink","uri","ApolloClient","link","concat","cache","InMemoryCache","onError","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ade54265.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const GET_USER = gql`\n    query GetUser(\n        $token: String!\n    ) {\n        getUser(token:$token) {\n            username\n            email\n            favourites {\n                _id\n            }\n        }\n    }\n`","export const getToken = () => {\n    const token = localStorage.getItem('token')\n    return token\n}","import { GET_USER } from '../queries/getUser';\nimport { getToken } from '../utils/getToken';\n\nconst token = getToken()\n\nconst getUser = (client) => {\n    try {\n        const user = client.readQuery({\n            query: GET_USER,\n            variables: { token }\n        })\n        return user.getUser\n    } catch (err) {\n        return undefined\n    }\n}\n\nexport default getUser","import React from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link, useHistory } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { MenuItem } from '@material-ui/core';\n\nimport getUser from '../../auth/getUser';\nimport { siteTitle } from '../../utils/siteConfig';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        textDecoration: 'none',\n        textTransform: 'uppercase',\n        color: 'white',\n        flexGrow: 1,\n        '& a': {\n            textDecoration: 'none',\n            textTransform: 'uppercase',\n            color: 'white'\n        }\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    }\n\n}));\n\n\n\nconst Navbar = () => {\n    const classes = useStyles();\n    const client = useApolloClient()\n    const user = getUser(client)\n\n    const handleLogout = () => {\n        localStorage.removeItem('token')\n        window.location.replace('/')\n    }\n\n    const history = useHistory()\n\n    const AuthNav = () => (\n        <div aria-label='auth-nav'>\n            <MenuItem onClick={() => { history.push('/add-recipe') }}>\n                Add Recipe\n            </MenuItem>\n            <MenuItem onClick={() => { history.push('/profile') }}>\n                {user.username.toUpperCase()}\n            </MenuItem>\n            <MenuItem name='logout-button' onClick={handleLogout}>\n                Logout\n            </MenuItem>\n        </div >\n    )\n\n    const Nav = () => (\n        <div aria-label='unauth-nav'>\n            <Link to='/login'>\n                <MenuItem color='inherit'>\n                    Login\n                </MenuItem>\n            </Link>\n            <Link to='/signup'>\n                <MenuItem color='inherit'>\n                    Signup\n                </MenuItem>\n            </Link>\n        </div >\n    )\n\n    return (\n        <div data-testid='navbar' className={classes.root}>\n            <AppBar position=\"static\" color='primary'>\n                <Toolbar>\n                    <Link\n                        to='/'\n                        className={classes.title}\n                    >\n                        <Button color='inherit'>\n                            <Typography component='h2' variant='h6'>\n                                {siteTitle}\n                            </Typography>\n                        </Button>\n                    </Link>\n\n                    <MenuItem color='inherit' onClick={() => { history.push('/search') }}>\n                        Search\n                    </MenuItem>\n\n                    {user ?\n                        <AuthNav user={user} />\n                        :\n                        <Nav />\n                    }\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n\n}\n\nexport default Navbar;","export const siteTitle = 'React Apollo Recipes'","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <div />\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport {\n    makeStyles,\n    Card,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    error: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '300px',\n        alignItems: 'center'\n    },\n}))\n\nconst Error = ({ message }) => {\n    const classes = useStyles()\n    return (\n        <Card>\n            <div role='error' className={classes.error}>\n                <h4>Error: </h4>\n                <p> {message}</p>\n            </div>\n        </Card>\n    )\n}\n\nexport default Error;","import React from 'react';\nimport {\n    makeStyles,\n    Card,\n    CircularProgress\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    loading: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '300px',\n        alignItems: 'center'\n    },\n}))\n\nconst Loading = () => {\n    const classes = useStyles()\n    return (\n        <Card>\n            <div role='loading' className={classes.loading}>\n                <CircularProgress />\n            </div>\n        </Card>\n    )\n}\n\nexport default Loading;","import { createMuiTheme } from '@material-ui/core/styles';\nimport pink from '@material-ui/core/colors/pink';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: pink\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                textTransform: 'uppercase',\n            }\n        },\n        MuiCssBaseline: {\n            '@global': {\n                html: {\n                    WebkitFontSmoothing: 'auto',\n                }\n            },\n        },\n    },\n})\n\nexport default theme","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { CssBaseline, Container, makeStyles } from '@material-ui/core'\nimport { ThemeProvider } from '@material-ui/core';\n\nimport Navbar from '../Navbar';\nimport Footer from '../Footer';\nimport Error from '../Error';\nimport Loading from '../Loading'\n\nimport theme from '../../theme'\n\nimport { GET_USER } from '../../queries/getUser';\n\nconst token = localStorage.getItem('token')\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        marginTop: '1rem',\n        marginBottom: '1rem'\n    }\n}))\n\n\n\nconst Layout = ({ children }) => {\n    const classes = useStyles()\n\n    // get user data with token from local storage\n    const { data, loading, error } = useQuery(GET_USER, { variables: { token: token ? token : '' } })\n\n    if (error) {\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Navbar />\n                <Container\n                    maxWidth='sm'\n                    className={classes.container}>\n                    <Error message={error.message} />\n                </Container>\n                <Footer />\n            </ThemeProvider>\n        )\n    }\n\n    if (loading) {\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Navbar />\n                <Container\n                    maxWidth='sm'\n                    className={classes.container}>\n                    <Loading />\n                </Container>\n                <Footer />\n            </ThemeProvider>\n        )\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Navbar />\n            <Container\n                maxWidth='sm'\n                className={classes.container}>\n                {children}\n            </Container>\n            <Footer />\n        </ThemeProvider>\n    )\n}\n\nexport default Layout;","import { gql } from '@apollo/client';\n\nexport const CREATE_USER = gql`\nmutation CreateUser(\n    $username: String!\n    $email: String!\n    $password: String!\n    ){\n      signupUser(\n        username: $username, \n        email: $email, \n        password: $password\n      ){\n        token\n      }\n  }\n`","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport {\n    makeStyles,\n    Paper,\n    Typography,\n    Button,\n    TextField\n} from '@material-ui/core'\n\nimport Error from '../Error';\nimport { CREATE_USER } from '../../mutations/createUser'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(2),\n            width: '70%',\n        },\n    },\n    paper: {\n        padding: '1rem',\n        paddingBottom: '3rem'\n    },\n    button: {\n        marginTop: '2rem'\n    }\n}))\n\nconst initialState = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n}\n\nconst Signup = () => {\n    const [state, setState] = useState({ ...initialState })\n    const classes = useStyles()\n    const [createUser, { error }] = useMutation(CREATE_USER)\n    // const [error, setError] = useState(false)\n\n    // handle change of all input box'x, update the state\n    const handleChange = ({ target }) => {\n        const { name, value } = target\n        setState(state => ({\n            ...state,\n            [name]: value\n        })\n        )\n    }\n\n    // ensure all fields filled in to enable button\n    const validateForm = () => {\n        const { username, email, password, confirmPassword } = state\n        if (username && email && password && password === confirmPassword) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    // handle submit button click\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        // if (!validateForm()) return\n\n        // submit request to server with state info from from\n        createUser({ variables: { ...state } })\n            .then(res => {\n                window.location.assign('/login')\n                // console.log(res)\n            }).catch(err => {\n                console.log(err)\n            })\n    }\n\n    if (error) return <Error message={error.message} />\n\n    return (\n        <Paper className={classes.paper}>\n            <Typography\n                variant='h5'\n                component='h1'\n                align='center'\n                className={classes.heading}\n            >\n                Sign Up\n            </Typography>\n            <form noValidate className={classes.root} autoComplete='off'>\n                <TextField\n                    name=\"username\"\n                    label=\"Username\"\n                    value={state.username}\n                    onChange={(event) => handleChange(event)}\n                    variant=\"outlined\"\n                />\n                <TextField\n                    name=\"email\"\n                    label=\"Email\"\n                    value={state.email}\n                    onChange={(event) => handleChange(event)}\n                    variant=\"outlined\"\n                />\n                <TextField\n                    name=\"password\"\n                    label=\"Password\"\n                    value={state.password}\n                    onChange={(event) => handleChange(event)}\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    name=\"confirmPassword\"\n                    label=\"Confirm Password\"\n                    value={state.confirmPassword}\n                    onChange={(event) => handleChange(event)}\n                    type=\"password\"\n                    variant=\"outlined\"\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    onClick={(event) => handleSubmit(event)}\n                    type='submit'\n                    name='submitButton'\n                >\n                    Submit\n                </Button>\n            </form>\n        </Paper>\n    )\n}\n\nexport default Signup;","import { gql } from '@apollo/client'\n\nexport const GET_PROFILE = gql`\n    query GetProfile(\n        $token: String!\n    ){\n        getProfile(\n            token: $token\n        ){\n            user{\n                _id\n                username\n                email\n                joinDate\n                favourites {\n                    _id\n                }\n            }\n            favRecipes {\n                _id\n                likes\n                category\n                name\n                username\n            }\n            createdRecipes {\n                _id\n                likes\n                category\n                name\n            }\n        }\n    }\n`","import { GET_PROFILE } from '../queries/getProfile';\n\nexport const handleInputChange = ({ target }, setState, setError) => {\n    const { name, value } = target\n    setState(state => ({\n        ...state,\n        [name]: value\n    })\n    )\n    setError(false)\n}\n\n// ensure all fields filled in to enable button\nexport const validateLoginForm = (state, form) => {\n    const { username, password } = state\n    if (username && password) {\n        return true\n    } else {\n        return false\n    }\n}\n\n// handle submit button click\nexport const handleLoginSubmit = (event, loginUser, state, client) => {\n    event.preventDefault()\n    if (!validateLoginForm(state)) return\n\n\n    // submit request to server with state info from from\n    loginUser({ variables: { ...state } })\n        .then(async res => {\n            localStorage.setItem('token', res.data.loginUser.token)\n            await client.query({\n                query: GET_PROFILE,\n                variables: { token: res.data.loginUser.token }\n            })\n            window.location.assign('/')\n        }).catch(err => {\n            console.log(err)\n        })\n}\n\nexport const validateRecipeForm = (setError, state) => {\n    const { name, description, instructions, category } = state\n    if (name && description && instructions && category) {\n        return true\n    } else {\n        setError(true)\n        return false\n    }\n}","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\nmutation LoginUser(\n  $username: String!\n  $password: String!\n  ){\n    loginUser(\n      username: $username, \n      password: $password\n    ){\n      token\n    }\n}\n`","import React, { useState } from 'react';\nimport { useMutation, useApolloClient } from '@apollo/client';\nimport { Redirect } from 'react-router-dom'\nimport {\n    makeStyles,\n    Paper,\n    Typography,\n    Button,\n    TextField\n} from '@material-ui/core'\n\nimport { handleInputChange, handleLoginSubmit } from '../../utils/formUtils'\nimport { LOGIN_USER } from '../../mutations/loginUser'\nimport { GET_PROFILE } from '../../queries/getProfile';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(2),\n            width: '70%',\n        },\n    },\n    paper: {\n        padding: '1rem',\n        paddingBottom: '3rem'\n    },\n    button: {\n        marginTop: '2rem'\n    }\n}))\n\nconst initialState = {\n    username: '',\n    password: '',\n}\n\nconst Login = () => {\n    const [state, setState] = useState({ ...initialState })\n    const [error, setError] = useState(false)\n    const classes = useStyles()\n    const [loginUser] = useMutation(LOGIN_USER)\n    const client = useApolloClient()\n\n    return (\n        <Paper className={classes.paper}>\n            <Typography\n                variant='h5'\n                component='h1'\n                align='center'\n                className={classes.heading}\n            >\n                Login\n            </Typography>\n            <form noValidate className={classes.root} autoComplete='off'>\n                <TextField\n                    name=\"username\"\n                    label=\"Username\"\n                    value={state.username}\n                    onChange={(event) => handleInputChange(event, setState, setError)}\n                    variant=\"outlined\"\n                />\n                <TextField\n                    name=\"password\"\n                    label=\"Password\"\n                    value={state.password}\n                    onChange={(event) => handleInputChange(event, setState, setError)}\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    variant=\"outlined\"\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    onClick={(event) => handleLoginSubmit(event, loginUser, state, client)}\n                    type='submit'\n                >\n                    Login\n                </Button>\n            </form>\n        </Paper>\n    )\n}\n\nexport default Login;","import { gql } from '@apollo/client';\n\nexport const GET_ALL_RECIPES = gql`\n    query { \n        getAllRecipes{\n        _id\n        name\n        category\n        description\n        username\n        likes\n        instructions\n        }\n    }\n`","import React from 'react'\nimport { useQuery, useApolloClient } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core'\nimport {\n    Typography,\n    Card,\n    CardContent,\n    List,\n    ListItem,\n    ListItemText,\n    CircularProgress\n} from '@material-ui/core';\n\nimport { GET_ALL_RECIPES } from '../../queries/allRecipes'\nimport Loading from '../Loading';\nimport Error from '../Error';\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        '& a': {\n            textDecoration: 'none',\n        },\n        margin: '1rem 0'\n    },\n    loading: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '300px',\n        alignItems: 'center'\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        flexDirection: 'row'\n    },\n    likes: {\n        padding: '0.5rem'\n    }\n}))\n\nconst Recipes = () => {\n    const { loading, error, data } = useQuery(GET_ALL_RECIPES)\n    const classes = useStyles()\n\n    if (loading) return <Loading />\n    if (error) return <Error message={error.message} />\n\n    const RecipeCard = ({ recipe }) => {\n        return (\n            <Card className={classes.card}>\n                <CardContent>\n                    <div className={classes.header}>\n                        <Link to={`/recipe/${recipe._id}`}>\n                            <Typography variant=\"h5\" component=\"h2\" >\n                                {recipe.name}\n                            </Typography>\n                        </Link>\n                        <Typography className={classes.likes}>\n                            Likes: {recipe.likes}\n                        </Typography>\n                    </div>\n                    <List>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Category\"\n                                secondary={recipe.category} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Description\"\n                                secondary={recipe.description} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Creator\"\n                                secondary={recipe.username} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemText\n                                primary=\"Instructions\"\n                                secondary={recipe.instructions} />\n                        </ListItem>\n                    </List>\n                </CardContent>\n            </Card >\n        )\n    }\n\n    return (\n        <>\n            {\n                data &&\n                data.getAllRecipes.map(recipe => (\n                    <RecipeCard key={recipe._id} recipe={recipe} />\n                ))\n            }\n        </>\n    )\n\n}\n\nexport default Recipes;","import { gql } from '@apollo/client'\n\nexport const RECIPE_SEARCH = gql`\n    query RecipeSearch($searchTerm:String){\n        recipeSearch(searchTerm:$searchTerm){\n            _id\n            name\n            likes\n        }\n    }\n`","import React, { useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom'\nimport {\n    makeStyles,\n    Paper,\n    Typography,\n    TextField,\n    Card,\n    CardContent,\n} from '@material-ui/core'\n\nimport Error from '../Error'\nimport { RECIPE_SEARCH } from '../../queries/recipeSearch'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(2),\n            width: '70%',\n        },\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        flexDirection: 'row'\n    },\n    likes: {\n        padding: '0.5rem'\n    },\n    card: {\n        marginTop: theme.spacing(2),\n    },\n    paper: {\n        padding: '1rem',\n        paddingBottom: '3rem'\n    },\n    button: {\n        marginTop: '2rem'\n    },\n\n}))\n\nconst Search = () => {\n    const [searchTerm, setSearchTerm] = useState('')\n    const [searchData, setSearchData] = useState([])\n    const [search, { error, refetch }] = useLazyQuery(RECIPE_SEARCH,\n        {\n            variables: { searchTerm: searchTerm },\n            onCompleted: data => {\n                try {\n                    setSearchData(data.recipeSearch)\n                }\n                catch (err) {\n                    console.log('no data found')\n                }\n            }\n        })\n    const classes = useStyles()\n\n    // handle change of all input box'x, update the state\n    const handleChange = ({ target }) => {\n        const { value } = target\n        setSearchTerm(value)\n        search()\n    }\n\n    const handleRefetch = () => {\n        if (searchData.called) {\n            refetch({ variables: { searchTerm: searchTerm } }).then(res => {\n                setSearchData(res.data.recipeSearch)\n            }).catch(err => {\n                console.log(err)\n            })\n        }\n    }\n\n    if (error) return <Error message={error.message} />\n\n    const SearchRecipeCard = ({ recipe }) => {\n        return (\n            <Card className={classes.card}>\n                <CardContent>\n                    <div className={classes.header}>\n                        <Link to={`/recipe/${recipe._id}`}>\n                            <Typography variant=\"h5\" component=\"h2\" >\n                                {recipe.name}\n                            </Typography>\n                        </Link>\n                        <Typography className={classes.likes}>\n                            Likes: {recipe.likes}\n                        </Typography>\n                    </div>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <Paper className={classes.paper}>\n                <Typography\n                    variant='h5'\n                    component='h1'\n                    align='center'\n                    className={classes.heading}\n                >\n                    Search\n            </Typography>\n                <form noValidate className={classes.root} autoComplete='off'>\n                    <TextField\n                        name=\"search\"\n                        label=\"Enter search term\"\n                        placeholder='Enter search term'\n                        type='search'\n                        value={searchTerm}\n                        onChange={(event) => handleChange(event)}\n                        variant=\"outlined\"\n                        onBlur={handleRefetch}\n                    />\n                </form>\n            </Paper>\n            {searchData.map(recipe => (\n                <SearchRecipeCard key={recipe._id} recipe={recipe} />\n            ))}\n        </>\n    )\n}\n\nexport default Search;","import { GET_PROFILE } from '../queries/getProfile';\n\nconst token = localStorage.getItem('token')\n\nconst updateUserCreatedRecipes = (store, recipes) => {\n    try {\n        const profileData = store.readQuery({\n            query: GET_PROFILE,\n            variables: { token }\n        })\n        const profile = profileData.getProfile\n        store.writeQuery({\n            query: GET_PROFILE,\n            variables: { token },\n            data: {\n                getProfile: {\n                    ...profile,\n                    createdRecipes: recipes\n                }\n            }\n        })\n    } catch (err) {\n        window.location.assign('/')\n        console.log(err)\n    }\n\n}\n\nexport default updateUserCreatedRecipes;","import { GET_ALL_RECIPES } from '../queries/allRecipes';\n\n/**\n * @funtion removeRecipe - Removes the recipe with the given id from the recipe list\n * @param {Array} recipes | Array of recipes\n * @param {String} recipeId | String of recipe ID\n * @returns {Array} | Updated list of recipes\n */\n\nexport const removeRecipe = (recipes, recipeId) => {\n    return recipes.filter(recipe => recipe._id !== recipeId)\n}\n\nexport const addRecipe = (recipes, recipe) => {\n    return [recipe, ...recipes]\n}\n\n// check if the recipe is already liked by the user\nexport const checkRecipeLiked = (favs, recipeId) => {\n    let liked = false\n    favs.forEach(fav => {\n        if (fav._id === recipeId) {\n            liked = true\n        }\n    })\n    return liked\n}\n\n// get favourites array of recipe ID's from user, return empty array if no user\nexport const getFavourites = (user) => {\n    try {\n        const favs = user.favourites\n        return favs\n    } catch {\n        return []\n    }\n}\n\nexport const getAllRecipes = store => {\n    try {\n        const recipeData = store.readQuery({\n            query: GET_ALL_RECIPES,\n        })\n        return recipeData.getAllRecipes\n    } catch (err) {\n        return undefined\n    }\n}","import { GET_ALL_RECIPES } from '../queries/allRecipes'\n\nconst addRecipeToCache = (store, recipe) => {\n    try {\n        const existingRecipes = store.readQuery({\n            query: GET_ALL_RECIPES\n        })\n        store.writeQuery({\n            query: GET_ALL_RECIPES,\n            data: {\n                getAllRecipes: [recipe, ...existingRecipes.getAllRecipes]\n            }\n        })\n    } catch (err) {\n        window.location.assign('/')\n        console.log(err)\n    }\n}\n\nexport default addRecipeToCache\n","import { gql } from '@apollo/client';\n\nexport const ADD_RECIPE = gql`\nmutation AddRecipe(\n    $name: String!\n    $category: String!\n    $description: String!\n    $instructions: String!\n    ) {\n        addRecipe(\n          name:$name,\n          category: $category,\n          description: $description,\n          instructions: $instructions\n          ) {\n            _id\n            name\n            category\n            description\n            username\n          }\n      }\n`","import { GET_PROFILE } from '../queries/getProfile';\nimport { getToken } from '../utils/getToken';\n\nconst token = getToken()\n\nconst getProfile = (client) => {\n    try {\n        const profileData = client.readQuery({\n            query: GET_PROFILE,\n            variables: { token }\n        })\n        return profileData.getProfile\n    } catch (err) {\n        return undefined\n    }\n}\n\nexport default getProfile","import React, { useState, useEffect } from 'react';\nimport { useMutation, useApolloClient, useQuery } from '@apollo/client';\nimport { Redirect } from 'react-router-dom'\nimport {\n    makeStyles,\n    Paper,\n    Typography,\n    Button,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem\n} from '@material-ui/core'\n\nimport { handleInputChange, validateRecipeForm } from '../../utils/formUtils'\nimport updateUserCreatedRecipes from '../../updateCache/updateUserCreatedRecipes';\nimport { addRecipe as addRecipeHelper } from '../../updateCache/helpers';\nimport addRecipeToCache from '../../updateCache/addRecipeToCache'\nimport { ADD_RECIPE } from '../../mutations/addRecipe'\nimport getProfile from '../../auth/getProfile'\nimport { GET_PROFILE } from '../../queries/getProfile';\nimport { getToken } from '../../utils/getToken';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(2),\n            width: '100%',\n        },\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        width: '50%'\n    },\n    paper: {\n        padding: '1rem',\n        paddingBottom: '3rem'\n    },\n    button: {\n        marginTop: '2rem'\n    }\n}))\n\nconst initialState = {\n    name: '',\n    category: '',\n    description: '',\n    instructions: '',\n}\n\nconst AddRecipe = () => {\n    const [state, setState] = useState({ ...initialState })\n    const [error, setError] = useState(false)\n    const client = useApolloClient()\n    const classes = useStyles()\n    const [addRecipe] = useMutation(ADD_RECIPE)\n\n    // handle submit button click\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (!validateRecipeForm(setError, state)) return\n        // TODO: Set error state on form, invlaid fields\n        const profile = getProfile(client)\n        // if (!profile) window.location.assing('/')\n\n        // submit request to server with state info from form\n        addRecipe({\n            variables: {\n                name: state.name,\n                category: state.category,\n                description: state.description,\n                instructions: state.instructions\n            },\n            // optomistic update to the cache\n            update: (client, { data: { addRecipe } }) => {\n                addRecipeToCache(client, addRecipe)\n                if (profile) {\n                    const createdRecipes = profile.createdRecipes\n                    // get user created recipes and update cache\n                    const updatedUserCreatedRecipes = addRecipeHelper(createdRecipes, addRecipe)\n                    updateUserCreatedRecipes(client, updatedUserCreatedRecipes)\n                }\n            }\n        })\n            .then(res => {\n                // console.log(res)\n                // return window.location.assign(`/recipe/${res.data.addRecipe._id}`)\n            }).catch(err => {\n                console.log(err)\n            })\n    }\n\n    // useEffect(() => {\n    //     const fetchProfile = async () => {\n    //         await client.query({\n    //             query: GET_PROFILE,\n    //             variables: {\n    //                 token: getToken()\n    //             }\n    //         })\n    //     }\n    //     fetchProfile()\n    // }, [])\n\n    return (\n        <Paper className={classes.paper}>\n            <Typography\n                variant='h5'\n                component='h1'\n                align='center'\n                className={classes.heading}\n            >\n                Add Recipe\n            </Typography>\n            <form noValidate className={classes.root} autoComplete='off'>\n                <TextField\n                    name=\"name\"\n                    aria-label='name'\n                    label=\"Recipe Name\"\n                    value={state.name}\n                    onChange={(event) => handleInputChange(event, setState, setError)}\n                    variant=\"outlined\"\n                />\n                <TextField\n                    name=\"description\"\n                    aria-label='description'\n                    label=\"Description\"\n                    value={state.description}\n                    onChange={(event) => handleInputChange(event, setState, setError)}\n                    variant=\"outlined\"\n                    multiline\n                    rows={2}\n                />\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                    <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\n                    <Select\n                        variant=\"outlined\"\n                        name='category'\n                        aria-label='category-select'\n                        value={state.category}\n                        onChange={(event) => handleInputChange(event, setState, setError)}\n                        label=\"Category\"\n                    >\n                        <MenuItem value='Breakfast'>Breakfast</MenuItem>\n                        <MenuItem value='Lunch'>Lunch</MenuItem>\n                        <MenuItem value='Dinner'>Dinner</MenuItem>\n                        <MenuItem value='Snack'>Snack</MenuItem>\n                    </Select>\n                </FormControl>\n                <TextField\n                    name=\"instructions\"\n                    aria-label='instructions'\n                    label=\"Instructions\"\n                    value={state.instructions}\n                    onChange={(event) => handleInputChange(event, setState, setError)}\n                    variant=\"outlined\"\n                    multiline\n                    rows={10}\n                />\n                {error &&\n                    <Typography >\n                        Invalid form fields\n                    </Typography>\n                }\n                <Button\n                    variant=\"contained\"\n                    aria-label='submit-button'\n                    color=\"primary\"\n                    className={classes.button}\n                    onClick={(event) => handleSubmit(event)}\n                    type='submit'\n                >\n                    Create\n                </Button>\n            </form>\n        </Paper>\n    )\n}\n\nexport default AddRecipe;","import { gql } from '@apollo/client';\n\nexport const REMOVE_LIKE = gql`\n    mutation RemoveLike($id: ID!){\n        removeLike(id:$id){\n            _id\n            name\n            category\n            description\n            instructions\n            likes\n        }\n    }\n\n`","import { GET_USER } from '../queries/getUser';\nimport { GET_PROFILE } from '../queries/getProfile';\n\nimport getUser from '../auth/getUser';\nimport getProfile from '../auth/getProfile';\n\nconst token = localStorage.getItem('token')\n\nconst updateProfileFavs = (store, profile, favs) => {\n    try {\n        store.writeQuery({\n            query: GET_PROFILE,\n            variables: { token },\n            data: {\n                getProfile: {\n                    user: {\n                        ...profile.user,\n                        favourites: favs\n                    },\n                    favRecipes: favs\n                }\n            }\n        })\n    }\n    catch (err) {\n        console.log(err)\n    }\n}\n\nconst updateUserFavs = (store, user, favs) => {\n    try {\n        store.writeQuery({\n            query: GET_USER,\n            variables: { token },\n            data: {\n                getUser: {\n                    ...user,\n                    favourites: favs\n                }\n            }\n        })\n    }\n    catch (err) {\n        console.log(err)\n    }\n}\n\nconst updateFavs = (store, favs) => {\n    const user = getUser(store)\n    const profile = getProfile(store)\n\n    updateProfileFavs(store, profile, favs)\n    updateUserFavs(store, user, favs)\n}\n\nexport default updateFavs","import React from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom'\nimport {\n    makeStyles,\n    Typography,\n    Card,\n    List,\n    ListItem,\n    ListItemText,\n    CardContent,\n    Button,\n} from '@material-ui/core'\n\nimport { REMOVE_LIKE } from '../../mutations/removeLike';\nimport updateFavs from '../../updateCache/updateUserFavs';\nimport { removeRecipe } from '../../updateCache/helpers';\n\n\nconst useStyles = makeStyles(theme => ({\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        flexDirection: 'row',\n        '& a': {\n            textDecoration: 'none',\n        },\n    },\n    likes: {\n        padding: '0.5rem'\n    },\n    card: {\n        marginTop: theme.spacing(2),\n        minWidth: '80%'\n    }\n}))\n\nconst Favourite = ({ user, recipe }) => {\n    const recipeId = recipe._id\n    const [removeLike] = useMutation(REMOVE_LIKE)\n    const classes = useStyles()\n\n    const handleUnlikeClick = () => {\n        // if user already likes recipe choose to`removeLike` mutation else `addLike` mutation\n        removeLike({\n            variables: { id: recipeId },\n            update: (store, data) => {\n                // remove recipe from current recipes\n                const recipes = user.favourites\n                const newFavs = removeRecipe(recipes, recipeId)\n\n                // update `getUser` query with optomistic response\n                updateFavs(store, newFavs)\n            }\n        })\n    }\n\n    return (\n        <Card data-testid='user-favourites' className={classes.card}>\n            <CardContent>\n                <div className={classes.header}>\n                    <Link to={`/recipe/${recipe._id}`}>\n                        <Typography variant=\"h5\" component=\"h2\" >\n                            {recipe.name}\n                        </Typography>\n                    </Link>\n                    <Typography className={classes.likes}>\n                        Likes: {recipe.likes}\n                    </Typography>\n                </div>\n                <List>\n                    <ListItem>\n                        <ListItemText\n                            primary=\"Category\"\n                            secondary={recipe.category} />\n                    </ListItem>\n                </List>\n                <Button\n                    color='default'\n                    variant='contained'\n                    aria-label='unlike-button'\n                    onClick={() => handleUnlikeClick(recipe._id)}\n                    className={classes.button}>\n                    Unlike\n                </Button>\n            </CardContent>\n        </Card >\n    )\n}\n\nexport default Favourite;","import { gql } from '@apollo/client';\n\nexport const DELETE_RECIPE = gql`\n    mutation DeleteRecipe($id: ID!){\n        deleteRecipe(id:$id) {\n            _id\n            name\n        }\n    }\n`","import { gql } from '@apollo/client';\n\nexport const ADD_LIKE = gql`\n    mutation AddLike($id: ID!){\n        addLike(id:$id){\n            _id\n            name\n            category\n            description\n            instructions\n            likes\n        }\n    }\n`","import updateFavs from '../updateCache/updateUserFavs';\nimport { removeRecipe, addRecipe } from '../updateCache/helpers';\n\nconst handleLikeClick = (recipeId, { user, liked, addLike, removeLike, userLiked = true }) => {\n    // if user already likes recipe choose to `removeLike` mutation else `addLike` mutation\n    if (liked) {\n        removeLike({\n            variables: { id: recipeId },\n            update: (store, data) => {\n                // remove recipe from current recipes\n                const recipes = user.favourites\n                const newFavs = removeRecipe(recipes, recipeId)\n\n                // update `getUser` query with optomistic response\n                updateFavs(store, newFavs)\n            }\n        })\n    } else {\n        userLiked = !userLiked\n        addLike({\n            variables: { id: recipeId },\n            update: (store, data) => {\n                // add recipe to current recipes\n                const favourites = user.favourites\n                const newRecipe = { __typename: \"Recipe\", _id: recipeId }\n                const newFavs = addRecipe(favourites, newRecipe)\n\n                // update `getUser` query with optomistic response\n                updateFavs(store, newFavs)\n            }\n        })\n    }\n}\n\nexport default handleLikeClick","import { GET_ALL_RECIPES } from '../queries/allRecipes';\n\nconst updateAllRecipes = (store, recipes) => {\n    try {\n        store.writeQuery({\n            query: GET_ALL_RECIPES,\n            data: {\n                getAllRecipes: recipes\n            }\n        })\n    } catch (err) {\n        window.location.assign('/')\n        console.log(err)\n    }\n}\n\nexport default updateAllRecipes\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom'\nimport {\n    makeStyles,\n    Typography,\n    Card,\n    List,\n    ListItem,\n    ListItemText,\n    CardContent,\n    Button,\n} from '@material-ui/core'\n\nimport { DELETE_RECIPE } from '../../mutations/deleteRecipe';\n\nimport { ADD_LIKE } from '../../mutations/addLike'\n\nimport handleLikeClick from '../../utils/handleLikeButtonClick'\nimport updateUserCreatedRecipes from '../../updateCache/updateUserCreatedRecipes';\nimport updateAllRecipes from '../../updateCache/updateAllRecipes';\nimport updateFavs from '../../updateCache/updateUserFavs';\n\nimport {\n    removeRecipe,\n    checkRecipeLiked,\n    getFavourites,\n    addRecipe,\n    getAllRecipes\n} from '../../updateCache/helpers';\n\n\nconst useStyles = makeStyles(theme => ({\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        flexDirection: 'row',\n        '& a': {\n            textDecoration: 'none',\n        },\n    },\n    likes: {\n        padding: '0.5rem'\n    },\n    card: {\n        marginTop: theme.spacing(2),\n        minWidth: '80%'\n    },\n    buttonDiv: {\n        display: 'flex',\n        '& button': {\n            marginRight: '1rem'\n        }\n    }\n}))\n\nconst UserRecipes = ({ recipe, createdRecipes, user }) => {\n    const [deleteRecipe] = useMutation(DELETE_RECIPE)\n    const classes = useStyles()\n\n    // get list of current user likes\n    const favs = getFavourites(user)\n\n    // check if recipe is in current user likes\n    let userLiked = checkRecipeLiked(favs, recipe._id)\n\n    // create like and unlike mutations\n    const [addLike] = useMutation(ADD_LIKE)\n\n    // handle change of all input box'x, update the state\n    const handleDeleteRecipe = (recipeId) => {\n        deleteRecipe({\n            variables: { id: recipeId },\n            update: (store, data) => {\n                // get all recipes from current cache, only update if root query on cache\n                const rootRecipes = getAllRecipes(store)\n                if (rootRecipes) {\n                    const updatedRootRecipes = removeRecipe(rootRecipes, recipeId)\n                    updateAllRecipes(store, updatedRootRecipes)\n                }\n\n                // get user created recipes and update cache\n                const updatedUserCreatedRecipes = removeRecipe(createdRecipes, recipeId)\n                updateUserCreatedRecipes(store, updatedUserCreatedRecipes)\n\n                // remove recipe from user liked recipes if its liked\n                if (userLiked) {\n                    const newFavs = removeRecipe(favs, recipeId)\n                    updateFavs(store, newFavs)\n                }\n            }\n        })\n    }\n\n    return (\n        <Card data-testid='user-recipe' className={classes.card}>\n            <CardContent>\n                <div className={classes.header}>\n                    <Link to={`/recipe/${recipe._id}`}>\n                        <Typography variant=\"h5\" component=\"h2\" >\n                            {recipe.name}\n                        </Typography>\n                    </Link>\n                    <Typography className={classes.likes}>\n                        Likes: {recipe.likes}\n                    </Typography>\n                </div>\n                <List>\n                    <ListItem>\n                        <ListItemText\n                            primary=\"Category\"\n                            secondary={recipe.category} />\n                    </ListItem>\n                </List>\n                <div className={classes.buttonDiv}>\n                    {!userLiked ?\n                        <Button\n                            color='default'\n                            variant='contained'\n                            onClick={() => handleLikeClick(recipe._id, { user, addLike })}\n                            className={classes.button}>\n                            Like\n                        </Button >\n                        :\n                        null\n                    }\n                    <Button\n                        color='secondary'\n                        variant='contained'\n                        onClick={() => handleDeleteRecipe(recipe._id)}\n                        className={classes.button}>\n                        Delete\n                </Button>\n                </div>\n            </CardContent>\n        </Card >\n    )\n}\n\nexport default UserRecipes;","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { makeStyles } from '@material-ui/core'\nimport {\n    Typography,\n    Card,\n    CardContent,\n    List,\n    ListItem,\n    ListItemText,\n    Button\n} from '@material-ui/core';\n\nimport { GET_PROFILE } from '../../queries/getProfile';\nimport Loading from '../Loading';\nimport Error from '../Error';\nimport Favourite from '../Favourite';\nimport UserRecipe from '../UserRecipe';\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: '1rem 0'\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        flexDirection: 'row'\n    },\n    likes: {\n        padding: '0.5rem'\n    },\n    favs: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        marginTop: '1rem',\n    },\n    buttonDiv: {\n        display: 'flex'\n    }\n}))\n\nconst formatDate = date => {\n    const newDate = new Date(date).toLocaleDateString('en-GB')\n    const newTime = new Date(date).toLocaleTimeString('en-GB')\n    return `${newDate} at ${newTime}`\n}\n\nconst Profile = () => {\n    const classes = useStyles()\n\n    const token = localStorage.getItem('token')\n\n\n    const { data, loading, error } = useQuery(GET_PROFILE, { variables: { token } })\n\n    if (loading) return <Loading />\n    if (error) return <Error message={error.message} />\n\n    if (data.getProfile) {\n        const user = data.getProfile.user\n        const favRecipes = data.getProfile.favRecipes\n        const createdRecipes = data.getProfile.createdRecipes\n        const noFavs = favRecipes.length === 0\n        const noCreatedRecipes = createdRecipes.length === 0\n\n        return (\n            <>\n                <Card classusername={classes.card}>\n                    <CardContent>\n                        < div className={classes.header} >\n                            <Typography variant=\"h5\" component=\"h2\" >\n                                {user.username}\n                            </Typography>\n                        </div >\n                        <List>\n                            <ListItem>\n                                <ListItemText\n                                    primary=\"Email\"\n                                    secondary={user.email}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemText\n                                    primary=\"Join Date\"\n                                    secondary={formatDate(user.joinDate)}\n                                />\n                            </ListItem>\n                        </List>\n                        <Button\n                            variant='contained'\n                            color='primary'>\n                            Do Something\n                        </Button>\n                    </CardContent>\n                </Card>\n                {noFavs ?\n                    <div className={classes.favs}>\n                        <Typography align='center' variant='h5'>\n                            No Favourites\n                        </Typography>\n                    </div>\n                    :\n                    <div className={classes.favs}>\n                        <Typography align='center' variant='h5'>\n                            Favourites\n                        </Typography>\n                        {favRecipes.map(recipe => (\n                            <Favourite\n                                key={recipe._id}\n                                user={user}\n                                recipe={recipe} />\n                        ))}\n                    </div>\n                }\n                {noCreatedRecipes ?\n                    <div className={classes.favs}>\n                        <Typography align='center' variant='h5'>\n                            No Created Recipes\n                        </Typography>\n                    </div>\n                    :\n                    <div className={classes.favs}>\n                        <Typography align='center' variant='h5'>\n                            User Created Recipes\n                        </Typography>\n                        {createdRecipes.map(recipe => (\n                            <UserRecipe\n                                user={user}\n                                key={recipe._id}\n                                createdRecipes={createdRecipes}\n                                recipe={recipe} />\n                        ))}\n                    </div>\n                }\n            </>\n        )\n    } else {\n        return (\n            <p>Who knows ?</p>\n        )\n    }\n}\n\nexport default Profile;","import { gql } from '@apollo/client';\n\nexport const GET_RECIPE = gql`\n    query GetRecipe($id:ID!){\n        getRecipe(id:$id){\n            _id\n            name\n            category\n            description\n            instructions\n            likes\n        }\n    }\n`","import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useApolloClient } from '@apollo/client';\nimport { makeStyles } from '@material-ui/core'\nimport { useParams } from 'react-router-dom';\nimport {\n    Typography,\n    Card,\n    CardContent,\n    List,\n    ListItem,\n    ListItemText,\n    Button\n} from '@material-ui/core';\n\nimport { GET_RECIPE } from '../../queries/getRecipe'\nimport { REMOVE_LIKE } from '../../mutations/removeLike'\nimport { ADD_LIKE } from '../../mutations/addLike'\nimport updateFavs from '../../updateCache/updateUserFavs';\nimport { removeRecipe, addRecipe, checkRecipeLiked, getFavourites } from '../../updateCache/helpers';\nimport handleLikeClick from '../../utils/handleLikeButtonClick'\nimport getUser from '../../auth/getUser'\nimport Loading from '../Loading'\nimport Error from '../Error'\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: '1rem 0'\n    },\n    loading: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '300px',\n        alignItems: 'center'\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        flexDirection: 'row'\n    },\n    likes: {\n        padding: '0.5rem'\n    }\n}))\n\nconst Recipe = () => {\n    const classes = useStyles()\n    const client = useApolloClient()\n    const user = getUser(client)\n\n    // set initial state of liked to false, update in `useEffect` hook\n    const [liked, setLiked] = useState(false)\n\n    // create like and unlike mutations\n    const [addLike] = useMutation(ADD_LIKE)\n    const [removeLike] = useMutation(REMOVE_LIKE)\n\n    // get recipe ID\n    const params = useParams()\n    const recipeId = params.id\n\n    // make query to get recipe\n    const { data, error, loading } = useQuery(GET_RECIPE,\n        {\n            variables: { id: recipeId },\n        }\n    )\n\n    useEffect(() => {\n        // get list of current user likes\n        const favs = getFavourites(user)\n\n        // check if recipe is in current user likes\n        const checkIfLiked = checkRecipeLiked(favs, recipeId)\n\n        // update state to reflect if user likes recipe\n        setLiked(checkIfLiked)\n    }, [user, liked, recipeId])\n\n    if (loading) return <Loading />\n    if (error) return <Error message={error.message} />\n\n    return (\n        <Card className={classes.card}>\n            <CardContent>\n                {data &&\n                    <>\n                        <div className={classes.header}>\n                            <Typography aria-label='recipe-header' variant=\"h5\" component=\"h2\" >\n                                {data.getRecipe.name}\n                            </Typography>\n                            <Typography aria-label='recipe-likes' className={classes.likes}>\n                                Likes: {data.getRecipe.likes}\n                            </Typography>\n                        </div>\n                        <List>\n                            <ListItem>\n                                <ListItemText\n                                    primary=\"Category\"\n                                    secondary={data.getRecipe.category}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemText\n                                    primary=\"Description\"\n                                    secondary={data.getRecipe.description}\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemText\n                                    primary=\"Instructions\"\n                                    secondary={data.getRecipe.instructions} />\n                            </ListItem>\n                        </List>\n                        {user &&\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    aria-label='like-button'\n                                    onClick={(id) => handleLikeClick(\n                                        recipeId,\n                                        {\n                                            addLike,\n                                            removeLike,\n                                            liked,\n                                            user\n                                        })}>\n                                    {liked ? <span>Liked</span> : <span>Like</span>}\n                                </Button>\n                            </>\n                        }\n                    </>\n                }\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default Recipe;","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { Redirect } from 'react-router-dom'\n\nimport { GET_USER } from '../queries/getUser';\nimport Loading from '../components/Loading';\nimport Error from '../components/Error';\nimport { getToken } from '../utils/getToken'\n\nconst token = getToken()\n\nconst withAuth = Component => props => {\n    // get user data with token from local storage\n    const { data, loading, error } = useQuery(GET_USER, {\n        variables: { token: token ? token : '' },\n    })\n\n    if (loading) {\n        return <Loading />\n    } else if (data && data.getUser !== null) {\n        return <Component {...props} />\n    } else if (error) {\n        return <Error message={error.message} />\n    } else {\n        return <Redirect to='/' />\n    }\n}\n\nexport default withAuth;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Signup from './components/Signup';\nimport Login from './components/Login';\nimport Recipes from './components/Recipes';\nimport Search from './components/Search';\nimport AddRecipe from './components/AddRecipe';\nimport Profile from './components/Profile';\nimport Recipe from './components/Recipe';\nimport withAuth from './auth/withAuth'\n\nconst BaseRouter = () => (\n    <Switch>\n        <Route path='/' exact component={Recipes} />\n        <Route path='/search' component={Search} />\n        <Route path='/add-recipe' component={withAuth(AddRecipe)} />\n        <Route path='/recipe/:id' component={Recipe} />\n        <Route path='/profile' component={withAuth(Profile)} />\n        <Route path='/login' component={Login} />\n        <Route path='/signup' component={Signup} />\n    </Switch>\n)\n\nexport default BaseRouter","import React from 'react';\nimport { InMemoryCache, ApolloLink, HttpLink, ApolloClient, ApolloProvider } from '@apollo/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Layout from './components/Layout'\nimport BaseRouter from './routes'\n\n// create auth link\nconst authLink = new ApolloLink((operation, forward) => {\n  // check user is authorized on each server request\n  // remove token from local storage if token has expired\n  // get token from local storage\n  const token = localStorage.getItem('token')\n  // set auth header to send to server\n  operation.setContext({\n    headers: {\n      authorization: token ? token : '',\n    }\n  });\n\n  // get response object\n  return forward(operation).map(response => {\n\n    // get context from reponse object\n    const context = operation.getContext();\n\n    // get headers of reponse object\n    const { response: { headers } } = context;\n\n    // if headers exist, get auth token\n    if (headers) {\n      // get token from headers\n      const authToken = headers.get('authorization')\n      const refreshToken = headers.get('Access-Control-Refresh-Token')\n\n      // refresh token if refresh token on header\n      if (refreshToken) {\n        localStorage.setItem('token', refreshToken)\n      }\n\n      // if not just logged in and token is expired, remove token from local storage\n      if (authToken === 'expired' && !response.data.loginUser) {\n        localStorage.removeItem('token')\n      }\n    }\n\n    return response;\n  })\n})\n\n// create link to server\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000' });\n\n// create new apollo client\nconst client = new ApolloClient({\n  // set link to ApolloLink and httpLink\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  onError: (error) => {\n    console.log(error)\n  }\n});\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <Layout>\n          <BaseRouter />\n        </Layout>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}